// Generated by CoffeeScript 1.3.3
var copy_arr, decimal_ternary_map, decimal_to_ternary, digit_map, echo, error, export_obj, exports, i, multiply_map, negative_arr, operation, plus_map, proceed, read_arr_from_str, read_str_from_arr, run_in_arr, smaller_arr, str_A, str_B, ternary_divide, ternary_minus, ternary_multiply, ternary_plus, ternary_to_decimal, unit_pos, zero_arr, zero_str, _i, _ref;

echo = console.log;

error = function(msg) {
  throw new Error(msg);
};

copy_arr = function(arr) {
  return arr.concat();
};

unit_pos = 100;

zero_arr = [];

for (i = _i = 1, _ref = unit_pos * 2 + 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
  zero_arr.push('5');
}

zero_str = zero_arr.join('');

str_A = '436&';

str_B = '43&';

operation = '+';

run_in_arr = {
  '+': function(arr_Ax, arr_Ay, arr_Bx, arr_By) {
    var arr_x, arr_y;
    arr_x = ternary_plus(arr_Ax, arr_Bx);
    arr_y = ternary_plus(arr_Ay, arr_By);
    return [arr_x, arr_y];
  },
  '-': function(arr_Ax, arr_Ay, arr_Bx, arr_By) {
    var arr_x, arr_y;
    arr_x = ternary_minus(arr_Ax, arr_Bx);
    arr_y = ternary_minus(arr_Ay, arr_By);
    return [arr_x, arr_y];
  },
  '*': function(arr_Ax, arr_Ay, arr_Bx, arr_By) {
    var arr_x, arr_x1, arr_x2, arr_y, arr_y1, arr_y2;
    arr_x1 = ternary_multiply(arr_Ax, arr_Bx);
    arr_x2 = ternary_multiply(arr_Ay, arr_By);
    arr_x = ternary_minus(arr_x1, arr_x2);
    arr_y1 = ternary_multiply(arr_Ax, arr_By);
    arr_y2 = ternary_multiply(arr_Ay, arr_Bx);
    arr_y = ternary_plus(arr_y1, arr_y2);
    return [arr_x, arr_y];
  },
  '/': function(arr_Ax, arr_Ay, arr_Bx, arr_By) {
    var arr_x, arr_x1, arr_x2, arr_y, arr_y1, arr_y2, divisor, divisor_1, divisor_2;
    arr_x1 = ternary_multiply(arr_Ax, arr_Bx);
    arr_x2 = ternary_multiply(arr_Ay, arr_By);
    arr_x = ternary_plus(arr_x1, arr_x2);
    arr_y1 = ternary_multiply(arr_Ay, arr_Bx);
    arr_y2 = ternary_multiply(arr_Ax, arr_By);
    arr_y = ternary_minus(arr_y1, arr_y2);
    divisor_1 = ternary_multiply(arr_Bx, arr_Bx);
    divisor_2 = ternary_multiply(arr_By, arr_By);
    divisor = ternary_plus(divisor_1, divisor_2);
    arr_x = ternary_divide(arr_x, divisor);
    arr_y = ternary_divide(arr_y, divisor);
    return [arr_x, arr_y];
  },
  '\\': function(arr_Ax, arr_Ay, arr_Bx, arr_By) {
    return (this['/'](arr_Ax, arr_Ay, arr_Bx, arr_By)).map(this['@']);
  },
  '%': function(arr_Ax, arr_Ay, arr_Bx, arr_By) {
    var Ax, Ay, Bx, By, _ref1, _ref2;
    _ref1 = this['\\'](arr_Ax, arr_Ay, arr_Bx, arr_By), Ax = _ref1[0], Ay = _ref1[1];
    _ref2 = this['*'](Ax, Ay, arr_Bx, arr_By), Bx = _ref2[0], By = _ref2[1];
    return this['-'](arr_Ax, arr_Ay, Bx, By);
  },
  '@': function(arr) {
    var digit, index, _j, _len;
    for (index = _j = 0, _len = arr.length; _j < _len; index = ++_j) {
      digit = arr[index];
      if (index > unit_pos) {
        arr[index] = '5';
      } else {
        arr[index] = digit;
      }
    }
    return arr;
  }
};

read_arr_from_str = function(str) {
  var arr, arr_x, arr_y, digit_pos, find_number, fraction_part, integral_part;
  while (str[0] === '5') {
    str = str.slice(1);
  }
  while (str.slice(-1)[0] === '5') {
    str = str.slice(0, -1);
  }
  find_number = str.match(/^([1-9]*)&([1-9]*)$/);
  if (find_number != null) {
    arr = copy_arr(zero_arr);
    integral_part = find_number[1].split('');
    fraction_part = find_number[2].split('');
    digit_pos = unit_pos;
    while (integral_part.length > 0) {
      if (arr[digit_pos] == null) {
        error('integral_part to long');
      }
      arr[digit_pos] = integral_part.pop();
      digit_pos -= 1;
    }
    digit_pos = unit_pos + 1;
    while (fraction_part.length > 0) {
      if (arr[digit_pos] == null) {
        error('fraction_part to long');
      }
      arr[digit_pos] = fraction_part.shift();
      digit_pos += 1;
    }
    arr_x = [];
    arr_y = [];
    arr.forEach(function(digit) {
      var pair;
      pair = digit_map[digit];
      arr_x.push(pair[0]);
      return arr_y.push(pair[1]);
    });
    return [arr_x, arr_y];
  } else {
    return error('not right string');
  }
};

read_str_from_arr = function(arrs) {
  var arr, arr_x, arr_y, digit, fraction_part, index, integral_part, str, _j, _len;
  arr_x = arrs[0];
  arr_y = arrs[1];
  arr = [];
  for (index = _j = 0, _len = arr_x.length; _j < _len; index = ++_j) {
    digit = arr_x[index];
    arr.push(digit_map[digit + '' + arr_y[index]]);
  }
  integral_part = arr.slice(0, unit_pos + 1 || 9e9).join('');
  fraction_part = arr.slice(unit_pos + 1).join('');
  str = integral_part + '&' + fraction_part;
  while (str[0] === '5') {
    str = str.slice(1);
  }
  while (str.slice(-1)[0] === '5') {
    str = str.slice(0, -1);
  }
  return str;
};

digit_map = {
  '1': '15',
  '15': '1',
  '2': '99',
  '99': '2',
  '3': '51',
  '51': '3',
  '4': '91',
  '91': '4',
  '5': '55',
  '55': '5',
  '6': '19',
  '19': '6',
  '7': '59',
  '59': '7',
  '8': '11',
  '11': '8',
  '9': '95',
  '95': '9'
};

plus_map = {
  '11': '19',
  '15': '51',
  '19': '55',
  '51': '51',
  '55': '55',
  '59': '59',
  '91': '55',
  '95': '59',
  '99': '91'
};

multiply_map = {
  '11': '1',
  '15': '5',
  '19': '9',
  '51': '5',
  '55': '5',
  '59': '5',
  '91': '9',
  '95': '5',
  '99': '1'
};

ternary_plus = function(arr_A, arr_B) {
  var arr, digit, index, ones, pair, tens, _j, _len, _ref1;
  arr_A = arr_A.concat();
  arr_B = arr_B.concat();
  arr = copy_arr(zero_arr);
  while ((arr_B.join('')) !== zero_str) {
    for (index = _j = 0, _len = arr_A.length; _j < _len; index = ++_j) {
      digit = arr_A[index];
      pair = digit + '' + arr_B[index];
      _ref1 = plus_map[pair], tens = _ref1[0], ones = _ref1[1];
      arr_A[index] = ones;
      if ((!(arr[index - 1] != null)) && tens !== '5') {
        error('overflow while plus');
      }
      arr[index - 1] = tens;
    }
    arr_B = copy_arr(arr);
    arr = copy_arr(zero_arr);
  }
  return arr_A;
};

ternary_minus = function(arr_A, arr_B) {
  return ternary_plus(arr_A, negative_arr(arr_B));
};

ternary_multiply = function(arr_A, arr_B) {
  var arr_1, arr_2, devation, digit, index, _j, _len;
  arr_1 = copy_arr(zero_arr);
  arr_2 = copy_arr(zero_arr);
  for (index = _j = 0, _len = arr_A.length; _j < _len; index = ++_j) {
    digit = arr_A[index];
    if (digit === '5') {
      continue;
    } else if (digit === '1') {
      arr_1 = copy_arr(arr_B);
    } else if (digit === '9') {
      arr_1 = negative_arr(arr_B);
    } else {
      error('bad arr elem in multiply');
    }
    devation = index - unit_pos;
    while (devation < 0) {
      if (arr_1.shift() !== '5') {
        error('out range right');
      }
      arr_1.push('5');
      devation += 1;
    }
    while (devation > 0) {
      if (arr_1.pop() !== '5') {
        error('out range left');
      }
      arr_1.unshift('5');
      devation -= 1;
    }
    arr_2 = ternary_plus(arr_2, arr_1);
    arr_1 = copy_arr(zero_arr);
  }
  return arr_2;
};

ternary_divide = function(arr_A, arr_B) {
  var arr_1, arr_2, digit, distance, index_1, index_2, item_1, item_2, jump, jump_loop, left, left_1, left_9, point, space_A, space_B, _j, _k, _len, _len1;
  arr_1 = copy_arr(zero_arr);
  if ((arr_A.join('')) === zero_str) {
    return arr_A;
  }
  space_A = arr_A.join('').match(/^(5*)/)[1].length;
  space_B = arr_B.join('').match(/^(5*)/)[1].length;
  distance = space_B - space_A;
  jump = unit_pos - distance - 2;
  if (distance < 0) {
    distance = -distance;
  }
  if (unit_pos - distance < 1) {
    error('our range dvision');
  }
  for (index_1 = _j = 0, _len = arr_1.length; _j < _len; index_1 = ++_j) {
    item_1 = arr_1[index_1];
    if (index_1 < jump) {
      continue;
    }
    arr_2 = copy_arr(zero_arr);
    jump_loop = false;
    for (index_2 = _k = 0, _len1 = arr_B.length; _k < _len1; index_2 = ++_k) {
      item_2 = arr_B[index_2];
      point = index_1 + index_2 - unit_pos;
      if (!(arr_2[point] != null)) {
        if (item_2 !== '5') {
          jump_loop = true;
          break;
        }
      }
      if (arr_2[point] != null) {
        arr_2[point] = arr_B[index_2];
      }
    }
    if (jump_loop) {
      continue;
    }
    digit = '5';
    left = copy_arr(arr_A);
    left_1 = ternary_minus(arr_A, arr_2);
    left_9 = ternary_plus(arr_A, arr_2);
    if (smaller_arr(left_1, left)) {
      digit = '1';
      left = copy_arr(left_1);
    }
    if (smaller_arr(left_9, left)) {
      digit = '9';
      left = copy_arr(left_9);
    }
    arr_A = copy_arr(left);
    arr_1[index_1] = digit;
  }
  return arr_1;
};

negative_arr = function(arr) {
  return arr.map(function(x) {
    switch (x) {
      case '1':
        return '9';
      case '9':
        return '1';
      case '5':
        return '5';
      default:
        return error('bad digit');
    }
  });
};

smaller_arr = function(arr_A, arr_B) {
  var digit, head, head_files_1, head_files_2, index, test, _j, _len;
  head_files_1 = (arr_A.join('')).match(/^(5*)/)[1].length;
  head_files_2 = (arr_B.join('')).match(/^(5*)/)[1].length;
  if (head_files_2 > head_files_1) {
    return false;
  }
  if (head_files_2 < head_files_1) {
    return true;
  }
  test = copy_arr(arr_A);
  while (test[0] != null) {
    head = test.shift();
    if (head === '5') {
      continue;
    }
    if (head === '9') {
      arr_A = negative_arr(arr_A);
    }
    break;
  }
  test = copy_arr(arr_B);
  while (test[0] != null) {
    head = test.shift();
    if (head === '5') {
      continue;
    }
    if (head === '9') {
      arr_B = negative_arr(arr_B);
    }
    break;
  }
  for (index = _j = 0, _len = arr_A.length; _j < _len; index = ++_j) {
    digit = arr_A[index];
    if (digit === arr_B[index]) {
      continue;
    }
    if (digit < arr_B[index]) {
      return false;
    }
  }
  return true;
};

decimal_ternary_map = {
  "0": "&",
  "1": "1&",
  "2": "19&",
  "3": "15&",
  "4": "11&",
  "5": "199&",
  "6": "195&",
  "7": "191&",
  "8": "159&",
  "9": "155&",
  "10": "151&",
  '1&': [1, 0],
  '2&': [-1, -1],
  '3&': [0, 1],
  '4&': [-1, 1],
  '5&': [0, 0],
  '6&': [1, -1],
  '7&': [0, -1],
  '8&': [1, 1],
  '9&': [-1, 0]
};

proceed = function(operation, str_A, str_B) {
  var arr_Ax, arr_Ay, arr_Bx, arr_By, result, _ref1, _ref2;
  _ref1 = read_arr_from_str(str_A), arr_Ax = _ref1[0], arr_Ay = _ref1[1];
  _ref2 = read_arr_from_str(str_B), arr_Bx = _ref2[0], arr_By = _ref2[1];
  result = run_in_arr[operation](arr_Ax, arr_Ay, arr_Bx, arr_By);
  return read_str_from_arr(result);
};

decimal_to_ternary = function(x, y) {
  var base, find_x, find_y, fra_arr, int_arr, number, ternary_x, ternary_y, x_negative, y_negative;
  x_negative = false;
  y_negative = false;
  if (x < 0) {
    x_negative = true;
    x = -x;
  }
  if (y < 0) {
    y_negative = true;
    y = -y;
  }
  x = String(x);
  y = String(y);
  ternary_x = '&';
  ternary_y = '&';
  find_x = x.match(/^(\d+)(\.(\d+))?$/);
  if (find_x != null) {
    if (!find_x[3]) {
      find_x[3] = '';
    }
    int_arr = find_x[1].split('');
    fra_arr = find_x[3].split('');
    base = '1&';
    while (int_arr.length > 0) {
      number = decimal_ternary_map[int_arr.pop()];
      number = proceed('*', number, base);
      ternary_x = proceed('+', number, ternary_x);
      base = proceed('*', base, '151&');
    }
    base = proceed('/', '1&', '151&');
    while (fra_arr.length > 0) {
      number = decimal_ternary_map[fra_arr.shift()];
      number = proceed('*', number, base);
      ternary_x = proceed('+', number, ternary_x);
      base = proceed('/', base, '151&');
    }
  } else {
    error('bad x number string');
  }
  find_y = y.match(/^(\d+)(\.(\d+))?$/);
  if (find_y != null) {
    if (!find_y[3]) {
      find_y[3] = '';
    }
    int_arr = find_y[1].split('');
    fra_arr = find_y[3].split('');
    base = '1&';
    while (int_arr.length > 0) {
      number = decimal_ternary_map[int_arr.pop()];
      number = proceed('*', number, base);
      ternary_y = proceed('+', number, ternary_y);
      base = proceed('*', base, '151&');
    }
    base = proceed('/', '1&', '151&');
    while (fra_arr.length > 0) {
      number = decimal_ternary_map[fra_arr.shift()];
      number = proceed('*', number, base);
      ternary_y = proceed('+', number, ternary_y);
      base = proceed('/', base, '151&');
    }
  } else {
    error('bad y number string');
  }
  if (x_negative) {
    ternary_x = proceed('-', '&', ternary_x);
  }
  if (y_negative) {
    ternary_y = proceed('-', '&', ternary_y);
  }
  ternary_y = proceed('*', '3&', ternary_y);
  return proceed('+', ternary_x, ternary_y);
};

ternary_to_decimal = function(ternary_str) {
  var find_number, fra_arr, fraction_part, int_arr, integral_part, pos_x, pos_y, unit, x, y, _ref1, _ref2;
  find_number = ternary_str.match(/^([1-9]*)&([1-9]*)$/);
  if (find_number != null) {
    integral_part = find_number[1];
    fraction_part = find_number[2];
    pos_x = 0;
    pos_y = 0;
    unit = 1;
    int_arr = integral_part.split('');
    fra_arr = fraction_part.split('');
    while (int_arr.length > 0) {
      _ref1 = decimal_ternary_map[int_arr.pop() + '&'], x = _ref1[0], y = _ref1[1];
      pos_x += x * unit;
      pos_y += y * unit;
      unit *= 3;
    }
    unit = 1 / 3;
    while (fra_arr.length > 0) {
      _ref2 = decimal_ternary_map[fra_arr.shift() + '&'], x = _ref2[0], y = _ref2[1];
      pos_x += x * unit;
      pos_y += y * unit;
      unit /= 3;
    }
    return [pos_x, pos_y];
  } else {
    return error('bad ternary_str to translate');
  }
};

export_obj = {
  '+': function(str_A, str_B) {
    return proceed('+', str_A, str_B);
  },
  '-': function(str_A, str_B) {
    return proceed('-', str_A, str_B);
  },
  '*': function(str_A, str_B) {
    return proceed('*', str_A, str_B);
  },
  '/': function(str_A, str_B) {
    return proceed('/', str_A, str_B);
  },
  '\\': function(str_A, str_B) {
    return proceed('\\', str_A, str_B);
  },
  '%': function(str_A, str_B) {
    return proceed('%', str_A, str_B);
  },
  '@': function(str) {
    var arr;
    arr = read_arr_from_str(str);
    arr = arr.map(run_in_arr['@']);
    return read_str_from_arr(arr);
  },
  decimal_to_ternary: decimal_to_ternary,
  ternary_to_decimal: ternary_to_decimal
};

if (typeof exports !== "undefined" && exports !== null) {
  exports = export_obj;
}

if (typeof window !== "undefined" && window !== null) {
  window.ternary = export_obj;
}

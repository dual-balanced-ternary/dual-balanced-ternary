// Generated by CoffeeScript 1.3.3

window.onload = function() {
  var current, fold_str, history, input, next, parse, previous, render, run, write;
  parse = function(arr) {
    var recurse;
    return (recurse = function() {
      var head, in_brackets;
      head = arr.shift();
      if (head === '[') {
        in_brackets = [];
        while (arr[0] !== ']') {
          in_brackets.push(recurse());
        }
        arr.shift();
        return in_brackets;
      } else {
        return head;
      }
    })();
  };
  run = function(arr) {
    var body, head;
    head = arr[0];
    body = arr.slice(1);
    if (ternary[head] != null) {
      console.log(body);
      body = body.map(function(x) {
        if (typeof x === 'object') {
          x = run(x);
        }
        return x;
      });
      console.log('');
      if (head === '@') {
        return ternary[head](body[0]);
      }
      return body.reduce(function(x, y) {
        return ternary[head](x, y);
      });
    } else {
      throw new Error('cannot find method:', head);
    }
  };
  fold_str = function(arr) {
    console.log('while:', arr);
    arr = arr.map(function(x) {
      if (typeof x === 'object') {
        return fold_str(x);
      } else {
        return x;
      }
    });
    return "[" + (arr.join(' ')) + "]";
  };
  render = function(str) {
    var arr, array_str, fold, html, msg, type;
    try {
      type = 'result';
      arr = str.replace(/\[/g, ' [ ').replace(/\]/g, ' ] ').split(' ').filter(function(x) {
        if (x !== '') {
          return true;
        } else {
          return false;
        }
      });
      console.log('arr:', arr);
      fold = parse(arr);
      console.log('fold:', fold);
      array_str = fold_str(fold);
      console.log('array_str:', array_str);
      write.innerHTML += "<span class='array'>got array:" + array_str + "</span><br>";
      msg = run(fold);
    } catch (error) {
      type = 'error';
      msg = error.message;
    }
    html = ">>> &nbsp; &nbsp; <span class='" + type + "'>" + msg + "</span><br>";
    return write.innerHTML += html;
  };
  write = document.getElementById('write');
  input = document.getElementById('input');
  input.focus();
  history = ['hello world', '[+ 1& 4& [* 4& 567& [/ 45& 34&]]]', '[@ 564564&]', '[\\ 345& 68&]', '[% 345& 68&]'];
  current = 5;
  previous = function() {
    if (current > 0) {
      current -= 1;
      return input.value = history[current];
    }
  };
  next = function() {
    if (current < history.length - 1) {
      current += 1;
      input.value = history[current];
    }
    if (current === (history.length - 1)) {
      current += 1;
      input.value = '[]';
      input.selectionStart = 1;
      return input.selectionEnd = 1;
    }
  };
  return input.onkeydown = function(event) {
    var code, find_number, front, pos, str;
    code = event.keyCode;
    console.log(code);
    pos = input.selectionStart;
    str = input.value;
    if (event.keyCode === 13) {
      str = input.value;
      history.push(str);
      current += 1;
      input.value = '[]';
      input.selectionStart = 1;
      input.selectionEnd = 1;
      render(str);
      return false;
    }
    if (event.keyCode === 229) {
      write.innerHTML += '<span class="error">please turn off Chinese input mode<span>';
    }
    if (code === 219) {
      str = str.slice(0, pos) + '[]' + str.slice(pos);
      input.value = str;
      input.selectionStart = pos + 1;
      input.selectionEnd = pos + 1;
      return false;
    }
    if (code === 221) {
      if (str[pos] === ']') {
        pos += 1;
        input.selectionStart = pos;
        input.selectionEnd = pos;
        return false;
      }
    }
    if (code === 8) {
      if (str.slice(pos - 1, pos + 1 || 9e9) === '[]') {
        str = str.slice(0, pos - 1) + str.slice(pos + 1);
        input.value = str;
        pos -= 1;
        input.selectionStart = pos;
        input.selectionEnd = pos;
        return false;
      }
    }
    if (code === 56 && event.shiftKey) {
      str = str.slice(0, pos) + '* ' + str.slice(pos);
      input.value = str;
      pos += 2;
      input.selectionStart = pos;
      input.selectionEnd = pos;
      return false;
    }
    if (code === 187 && event.shiftKey) {
      str = str.slice(0, pos) + '+ ' + str.slice(pos);
      input.value = str;
      pos += 2;
      input.selectionStart = pos;
      input.selectionEnd = pos;
      return false;
    }
    if (code === 189) {
      str = str.slice(0, pos) + '- ' + str.slice(pos);
      input.value = str;
      pos += 2;
      input.selectionStart = pos;
      input.selectionEnd = pos;
      return false;
    }
    if (code === 191) {
      str = str.slice(0, pos) + '/ ' + str.slice(pos);
      input.value = str;
      pos += 2;
      input.selectionStart = pos;
      input.selectionEnd = pos;
      return false;
    }
    if (code === 53 && event.shiftKey) {
      str = str.slice(0, pos) + '% ' + str.slice(pos);
      input.value = str;
      pos += 2;
      input.selectionStart = pos;
      input.selectionEnd = pos;
      return false;
    }
    if (code === 50 && event.shiftKey) {
      str = str.slice(0, pos) + '@ ' + str.slice(pos);
      input.value = str;
      pos += 2;
      input.selectionStart = pos;
      input.selectionEnd = pos;
      return false;
    }
    if (code === 220) {
      str = str.slice(0, pos) + '\\ ' + str.slice(pos);
      input.value = str;
      pos += 2;
      input.selectionStart = pos;
      input.selectionEnd = pos;
      return false;
    }
    if (code === 32) {
      front = str.slice(0, pos);
      find_number = front.match(/\s([1-9]+)$/);
      console.log(front, find_number);
      if (find_number != null) {
        str = front + '& ' + str.slice(pos);
        input.value = str;
        pos += 2;
        input.selectionStart = pos;
        input.selectionEnd = pos;
        return false;
      }
    }
    if (code === 38) {
      previous();
    }
    if (code === 40) {
      return next();
    }
  };
};
